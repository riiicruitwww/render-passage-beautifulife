// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header about render compare with snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <WithRenderPropertyByName
    property={
      Object {
        "name": "choice",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "choice": Object {
        "name": "choice",
      },
      "questionId": undefined,
    },
    "ref": null,
    "rendered": null,
    "type": Object {
      "$$typeof": Symbol(react.memo),
      "WrappedComponent": [Function],
      "compare": null,
      "displayName": "Connect(Choice)",
      "type": [Function],
      Symbol(Symbol.hasInstance): [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "choice": Object {
          "name": "choice",
        },
        "questionId": undefined,
      },
      "ref": null,
      "rendered": null,
      "type": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(Choice)",
        "type": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
