// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Vocabulary about render compare with snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Vocabulary
    vocabulary={
      Object {
        "meaning": "test",
        "word": "test",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <span
          className="Vocabulary__word"
        >
          test
          :
        </span>,
        <span
          className="Vocabulary__meaning"
        >
          test
        </span>,
      ],
      "className": "Vocabulary",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "test",
            ":",
          ],
          "className": "Vocabulary__word",
        },
        "ref": null,
        "rendered": Array [
          "test",
          ":",
        ],
        "type": "span",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "test",
          "className": "Vocabulary__meaning",
        },
        "ref": null,
        "rendered": "test",
        "type": "span",
      },
    ],
    "type": "span",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span
            className="Vocabulary__word"
          >
            test
            :
          </span>,
          <span
            className="Vocabulary__meaning"
          >
            test
          </span>,
        ],
        "className": "Vocabulary",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "test",
              ":",
            ],
            "className": "Vocabulary__word",
          },
          "ref": null,
          "rendered": Array [
            "test",
            ":",
          ],
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "test",
            "className": "Vocabulary__meaning",
          },
          "ref": null,
          "rendered": "test",
          "type": "span",
        },
      ],
      "type": "span",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
